// <auto-generated />
using CodeFirst1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeFirst1.Migrations
{
    [DbContext(typeof(StudDeptContext))]
    partial class StudDeptContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodeFirst1.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 101,
                            CourseName = "Advanced C# and .NET"
                        },
                        new
                        {
                            CourseId = 102,
                            CourseName = "Machine Learning with Python"
                        },
                        new
                        {
                            CourseId = 103,
                            CourseName = "Data Structures & Algorithms"
                        });
                });

            modelBuilder.Entity("CodeFirst1.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "Computer Science"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Electronics and Telecommunication"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Mechanical Engineering"
                        });
                });

            modelBuilder.Entity("CodeFirst1.Models.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerId"));

                    b.Property<string>("TrainerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TrainerId");

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            TrainerId = 1,
                            TrainerName = "Priya Sharma"
                        },
                        new
                        {
                            TrainerId = 2,
                            TrainerName = "Rahul Verma"
                        },
                        new
                        {
                            TrainerId = 3,
                            TrainerName = "Sanjay Gupta"
                        });
                });

            modelBuilder.Entity("CourseTrainer", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "TrainerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("CourseTrainers");

                    b.HasData(
                        new
                        {
                            CourseId = 101,
                            TrainerId = 1
                        },
                        new
                        {
                            CourseId = 102,
                            TrainerId = 2
                        },
                        new
                        {
                            CourseId = 103,
                            TrainerId = 3
                        });
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Fees")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("StudentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students", t =>
                        {
                            t.HasCheckConstraint("CK_Stud_Age", "Age >= 18 AND Age <= 30");
                        });

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            Age = 20,
                            City = "Mumbai",
                            DepartmentId = 1,
                            Fees = 100000m,
                            Name = "Virendra"
                        },
                        new
                        {
                            StudentId = 2,
                            Age = 22,
                            City = "Pune",
                            DepartmentId = 2,
                            Fees = 90000m,
                            Name = "Prathamesh"
                        },
                        new
                        {
                            StudentId = 3,
                            Age = 21,
                            City = "Bangalore",
                            DepartmentId = 3,
                            Fees = 110000m,
                            Name = "Vijit"
                        });
                });

            modelBuilder.Entity("StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CourseId = 101
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 102
                        },
                        new
                        {
                            StudentId = 3,
                            CourseId = 101
                        });
                });

            modelBuilder.Entity("CourseTrainer", b =>
                {
                    b.HasOne("CodeFirst1.Models.Course", "Course")
                        .WithMany("CourseTrainers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFirst1.Models.Trainer", "Trainer")
                        .WithMany("CourseTrainers")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasOne("CodeFirst1.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentCourse", b =>
                {
                    b.HasOne("CodeFirst1.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CodeFirst1.Models.Course", b =>
                {
                    b.Navigation("CourseTrainers");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("CodeFirst1.Models.Department", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("CodeFirst1.Models.Trainer", b =>
                {
                    b.Navigation("CourseTrainers");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
